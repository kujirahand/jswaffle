/**
 * ScriptDoc for jsWaffle.js
 * @namespace jsWaffle.droid
 */

//---------------------------------------------------------------------
// _base
//---------------------------------------------------------------------
/**
 * get jsWaffle API Version
 * @id droid.getWaffleVersion
 * @alias droid.getWaffleVersion
 * @return {Number} version number
 */

/**
 * beep sound
 * ビープ音を鳴らす
 * @id droid.beep
 * @alias droid.beep
 * @return {Void}
 */
/**
 * ring sound
 * ベルを鳴らす
 * @id droid.ring
 * @alias droid.ring
 * @return {Void}
 */

/**
 * ring sound stop
 * ベルを止める
 * @id droid.ring_stop
 * @alias droid.ringstop
 * @return {Void}
 */

/**
 * vibrate device
 * 端末をバイブさせる
 * @id droid.vibrate
 * @alias droid.vibrate
 * @param {Number} msec vibration time(milliseconds). Default is 500.
 * @return {Void}
 */

/**
 * popup message (toast)
 * メッセージをポップアップする(トーストを表示する)
 * @id droid.makeToast
 * @alias droid.makeToast
 * @param {String} message
 * @return {Void}
 */

/**
 * Set MenuItem
 * [menu]ボタンを押した時に出るメニューを設定する

 * (example) iconName is "ic_menu_edit/ic_menu_gallery/ic_menu_help/ic_menu_info_details/ic_menu_manage/ic_menu_preferences"
 * @see http://www.taosoftware.co.jp/blog/2008/11/android_5.html About Android's icon name
 * 
 * @id droid.setMenuItem
 * @alias droid.setMenuItem
 * @param {Integer} itemNo (0-5)
 * @param {boolean} visible
 * @param {String} title
 * @param {String} iconName (resourceName])
 * @param {Function} callback_fn
 * @param {Void}
 */

/**
 * Dialog Yes or No
 * [はい][いいえ]で選択するダイアログを表示する
 * @id droid.dialogYesNo
 * @alias droid.dialogYesNo
 * @param {String} title
 * @param {String} message
 * @return {Boolean}
 */

/**
 * List Dialog
 * 一覧から一つを選ぶリストダイアログを表示する
 * @id droid.dialogList
 * @alias droid.dialogList
 * @param {String} title
 * @param {Array} items
 * @return {String} selected item
 */

/**
 * Checkbox list dialog
 * チェックボックス付のリストダイアログを表示する
 * @id dorid.dialogCheckboxList
 * @alias dorid.dialogCheckboxList
 * @param {String} title
 * @param {Array} items
 * @return {Array} selected item
 */

/**
 * Date picker dialog
 * 日付選択ダイアログを表示する
 * @id droid.dialogDatePicker
 * @alias droid.dialogDatePicker
 * @param {Date} defaultDate
 * @return {Date}
 */

/**
 * Time picker dialog
 * 時間選択ダイアログを表示する
 * @id droid.dialogTimePicker
 * @alias droid.dialogTimePicker
 * @param {Integer} hours
 * @param {Integer} minutes
 * @return {String} time format "hh:nn"
 */

/**
 * Seekbar dialog
 * シークバーの付いたダイアログを表示する
 * @id droid.dialogSeekbar
 * @alias droid.dialogSeekbar
 * @param {String} title
 * @param {Integer} min
 * @param {Integer} max
 * @param {Integer} defaltValue
 * @return {Integer} value
 */

/**
 * show log
 * DDMSにログを表示する 
 * @id droid.log 
 * @alias droid.log 
 * @param {String} msg	log message
 */
/**
 * show log
 * DDMSに警告ログを表示する 
 * @id droid.log_warn 
 * @alias droid.log_warn
 * @param {String} msg	log message
 */
/**
 * show log
 * DDMSにエラーログを表示する 
 * @id droid.log_error 
 * @alias droid.log_error 
 * @param {String} msg	log message
 */
/**
 * get last error string
 * 前回発生したエラーを取得する
 * @id droid.getLastError
 * @alias droid.getlastError
 * @return {string}
 */

/**
 * Get Res Strings
 * 国際化のためのリソース文字列(values-xx/strings.xml)の値を取得する

 * @id droid.getResString
 * @alias droid.getResString
 * @param {String} id
 * @return {String} Get String from resource
 */

/**
 * Add Event Listener
 * イベントリスナを追加する(resume/pause/pageFinished)
 * @id droid.addEventListener
 * @alias droid.addEventListener
 * @param {String} eventName
 * @param {Function} listener
 */

/**
 * Remove Event Listener
 * イベントリスナを削除する
 * @id droid.removeEventListener
 * @alias droid.removeEventListener
 * @param {String} eventName
 * @param {Function} listener
 */

/**
 * sound play
 * サウンドを再生する(BGMに最適、効果音はloadSoundPoolを使う)
 * @id droid.playSound
 * @alias droid.playSound
 * @param {String} filename
 * @param {Boolean} loopMode
 * @param {String} audioType ("ring" or "music")
 * @return {MediaPlayer}
 */

/**
 * stop sound
 * @id droid.stopSound
 * @alias droid.stopSound
 * @param {MediaPlayer} playerObj
 * @return {Void}
 */

/**
 * Check playing sound 
 * @id droid.isPlayingSound 
 * @alias droid.isPlayingSound 
 * @param {MediaPlayer} playerObj
 * @return {Boolean}
 */


/**
 * load to SoundPool (for SE)
 * サウンドを再生する(効果音に最適、BGMはplaySoundを使う)
 * @id droid.loadSoundPool
 * @alias droid.loadSoundPool
 * @param {String} filename
 * @return {Number} soundId
 */

/**
 * play SoundPool. Before play, needs to loadSoundPool.
 * @id droid.playSoundPool
 * @alias droid.playSoundPool
 * @alias droid.playSoundPool
 * @param {Number} soundId	SoundPool's id
 * @param {Number} loopCount
 * @return {Void}
 */

/**
 * stop SoundPool. Before play, needs to loadSoundPool.
 * @id droid.stopSoundPool
 * @alias droid.stopSoundPool
 * @param {Number} soundId	SoundPool's id
 * @return {Void}
 */

/**
 * unload SoundPool. 
 * @id droid.unloadSoundPool
 * @alias droid.unloadSoundPool
 * @param {Number} soundId	SoundPool's id
 * @return {Void}
 */

/**
 * Start Intent (ex) mailto:hoge@example.com?subject=xxx&body=xxx
 * @id droid.startIntent
 * @alias droid.startIntent
 * @param {String}url (http/https/market/tel/sms/geo/mailto/file/camera/video)
 * @return {Boolean} result
 */

/**
 * Start Intent for Result
 * @id droid.startIntentForResult
 * @alias droid.startIntentForResult
 * @param {String} url
 * @param {Function} callback
 * @return {Boolean} result
 */

/**
 * Start Intent with FullScreen
 * @id droid.startIntentFullScreen
 * @alias droid.startIntentFullScreen
 * @param {String} url (ex) file:///assets/www/full.html
 * @return {Boolean}
 */

/**
 * Create custom Intent 
 * @id droid.intent_new
 * @alias droid.intent_new
 * @param {String}action
 * @param {String}uri
 * @return {Intent}
 */

/**
 * Put Extra Data to Custom Intent
 * @id droid.intent_putExtra
 * @alias droid.intent_putExtra
 * @param {Intent} intent
 * @param {String} name
 * @param {String} value
 * @return {Void}
 */

/**
 * Gut Extra Data to Custom Intent
 * @id droid.intent_getExtra
 * @alias droid.intent_getExtra
 * @param {Intent} intent
 * @param {String} name
 * @return {String}
 */

/**
 * Check exists intent
 * @id droid.intent_exists
 * @alias droid.intent_exists
 * @param {String} intentName
 * @return {Boolean}
 */

/**
 * Start Custom Intent
 * @id droid.intent_startActivity
 * @alias droid.intent_startActivity
 * @param {Intent} intent
 * @return {Boolean}
 */

/**
 * Scan Barcode
 * @id droid.scanBarcode
 * @alias droid.scanBarcode
 * require "com.google.zxing.client.android"
 * @see http://code.google.com/p/zxing/
 * @param {Object} callback_fn
 * @param {String} mode (AUTO|QR_CODE_MODE|ONE_D_MODE|DATA_MATRIX_MODE)
 * @param {boolean} show_help
 * @return {boolean} Scanner exisits?
 */

/**
 * Select Image From Gallery
 * @id droid.pickupImageFromGallery
 * @alias droid.pickupImageFromGallery
 * @param {Object} callback_fn (Function (url) {} )
 * @return {Void}
 */

/**
 * Show Route with GoogleMaps
 * @id droid.showRoute
 * @alias droid.showRoute
 * @param {String} start (example)'35.671989 139.7' or '東京都渋谷区'
 * @param {String} end
 * @return {Void}
 */

/**
 * finish app
 * @id droid.quit
 * @alias droid.quit
 */

/**
 * save screen capture 
 * @id droid.snapshotToFile
 * @alias droid.snapshotToFile
 * @param {String} filename
 * @param {String} format (png or jpeg)
 * @return {Boolean} save result
 */

/**
 * http get
 * @id droid.httpGet
 * @alias droid.httpGet
 * @param {String} url
 * @param {Function}callback_ok	set Function(resultStr)
 * @param {Function}callback_ng set Function(errorMessage)
 * @return {Boolean}
 */

/**
 * http download
 * @id droid.httpDownload
 * @alias droid.httpDownload
 * @param {String} url
 * @param {String} filename
 * @param {Function} callback	set Function(result)
 */

/**
 * http post
 * @id droid.httpPost
 * @alias droid.httpPost
 * @param {String} url
 * @param {Object} post_obj
 * @param {Function} callback	set Function(result)
 */


/**
 * copy text to clipboard
 * @id droid.clipboardSetText
 * @alias droid.clipboardSetText
 * @param {String} text
 */

/**
 * get text from clipboard
 * @id droid.clipboardGetText
 * @alias droid.clipboardGetText
 * @return {String} text
 */

//---------------------------------------------------------------------
// _accel
//---------------------------------------------------------------------
/**
 * watch ACCELEROMETER
 * 傾きセンサーを監視する

 * @id droid.watchAccel
 * @alias droid.watchAccel
 * @param {Function} callback
 * @return {Number} watchId
 */

/** 
 * clear ACCELEROMETER
 * 傾きセンサーの監視を中止する。watchId を省略すると全ての傾きセンサーの利用を中断する。

 * @id droid.clearAccel
 * @alias droid.clearAccel
 * @param {Number} watchId	watchAccel's return value (Default is clear all.)
 * @return {Void}
 */

/**
 * watch Shake device
 * デバイスがシェイクされるのを監視する

 * @id droid.watchShake
 * @alias droid.watchShake
 * @param {Function} shake_begin_callback_fn
 * @param {Function} shake_end_callback_fn
 * @param {Number} shake_begin_freq (default = 20)
 * @param {Number} shake_end_freq (default = 8)
 * @return {Number} watchId
 */

//---------------------------------------------------------------------
// _db
//---------------------------------------------------------------------


/**
 * open database
 * @id droid.openDatabase
 * @alias droid.openDatabase
 * @paran {String} dbname
 * @return {DBHelper} database object
 */

/**
 * executeSql
 * @id droid.executeSql
 * @alias droid.executeSql
 * @param {DBHelper}db
 * @param {String}sql
 * @param {Function}fn_ok
 * @param {Function}fn_ng
 */

/**
 * executeSqlSync
 * @id droid.executeSqlSync
 * @alias droid.executeSqlSync
 * @param {DBHelper}db
 * @param {String}sql
 * @return {Array}query result
 */

//---------------------------------------------------------------------
// _gps
//---------------------------------------------------------------------
/**
 * get current position (GPS)
 * @id droid.getCurrentPosition
 * @alias droid.getCurrentPosition
 * @param {Function} onSuccess
 * @param {Function} onError
 * @param {Object} options {Boolean}enableHighAccuracy/{Integer}timeout(msec)/{Integer}maximumAge
 * @return {Number} watchId
 */

/**
 * watchPosition (GPS)
 * @id droid.watchPosition
 * @alias droid.watchPosition
 * @param {Function} onSuccess
 * @param {Function} onError
 * @param {Object} options {Boolean}enableHighAccuracy/{Integer}timeout(msec)/{Integer}maximumAge
 * @return {Number} watchId
 */

/**
 * clear watchPosion function
 * @id droid.clearWatchPosition
 * @alias droid.clearWatchPosition
 * @alias DroidWaffle.geolocation.clearWatch
 * @param {Number} watchid
 */


//---------------------------------------------------------------------
// _storage
//---------------------------------------------------------------------
/**
 * storage set
 * @id droid.storage_set
 * @alias droid.storage_set
 * @param {String} key
 * @param {String} value
 */
/**
 * storage get
 * @id droid.pref_get
 * @alias droid.pref_get
 * @param {String} key
 * @param {String} defValue
 */
/**
 * storage remove
 * @id droid.pref_remove
 * @alias droid.pref_remove
 * @param {String} key
 */
/**
 * storage clear all
 * @id droid.pref_clear
 * @alias droid.pref_clear
 */

/**
 * save text file
 * @id droid.saveText
 * @alias droid.saveText
 * @param {String} filename
 * @param {String} text
 */

/**
 * load text file
 * @id droid.loadText
 * @alias droid.loadText
 * @param {String} filename
 * @return {String} text
 */

/**
 * get file list
 * @id droid.fileList
 * @alias droid.fileList
 * @param {String} path (if undefined then default data area)
 * @return {Array} file list
 */

/**
 * check file exists
 * @id droid.fileExists
 * @alias droid.fileExists
 * @param {String} path
 * @return {Boolean}
 */

/**
 * create directories
 * @id droid.mkdir
 * @alias droid.mkdir
 * @param {String} path
 * @return {Boolean}
 */

/**
 * delete file
 * @id droid.deleteFile
 * @alias droid.deleteFile
 * @param {String} path
 * @return {Boolean}
 */

/**
 * fileSize
 * @id droid.fileSize
 * @alias droid.fileSize
 * @param {String} path
 * @return {Number}
 */

/**
 * copy file from assets to sdcard
 * @id droid.copyAssetsFile
 * @alias droid.copyAssetsFile
 * @param {String} assetsName
 * @param {String} savepath
 * @return {Boolean}
 */

/**
 * copy separated file from assets to sdcard
 * @id droid.mergeSeparatedAssetsFile
 * @alias droid.mergeSeparatedAssetsFile
 * @param {String} assetsName
 * @param {String} savepath
 * @return {Boolean}
 */

/**
 * copy file
 * @id droid.fileCopy
 * @alias droid.fileCopy
 * @param {String} src source url
 * @param {String} des destination url
 * @return {Boolean}
 */

/**
 * audio recording
 * @id droid.audiorecStart
 * @alias droid.audiorecStart
 * @param {String} save filename (*.amr/*.3gp)
 * @return {Boolean}
 */

/**
 * audio recording
 * @id droid.audiorecStop
 * @alias droid.audiorecStop
 * @return {Boolean}
 */

//---------------------------------------------------------------------
// _dev
//---------------------------------------------------------------------
/**
 * Get Display info
 * @id droid.getDisplayInfo
 * @alias droid.getDisplayInfo
 * @return {Object}
 */

/**
 * get system memory size
 * @id droid.getSystemMemory
 * @alias droid.getSystemMemory
 * @return {Number} bytes
 */

/**
 * get memory info object
 * @id droid.getMemoryInfo
 * @alias droid.getMemoryInfo
 * @return {Object}
 */

/**
 * has sdcard ?
 * @id droid.hasSDCard
 * @alias droid.hasSDCard
 * @return {Boolean}
 */

/**
 * SD card path
 * @id droid.getSDCardPath
 * @alias droid.getSDCardPath
 * @return {String} sdcard path
 */

/**
 * @id droid.getAndroidVersionInt
 * @alias droid.getAndroidVersionInt
 * @return {Number}
 */

/**
 * @id droid.getAndroidVersionRelease
 * @alias droid.getAndroidVersionRelease
 * @return {String}
 */

/**
 * get device unique info
 * 端末固有のIDを取得する

 * @id droid.getAndroidId
 * @alias droid.getAndroidId
 * @return {String}
 */

//---------------------------------------------------------------------
// _contact
//---------------------------------------------------------------------
/**
 * pickup Contanct
 * @id droid.pickupContact
 * @alias droid.pickupContact
 * @param {Function} callback
 * @return {Void}
 */


//---------------------------------------------------------------------
// other
//---------------------------------------------------------------------
/**
 * JSON encode
 * @id droid.stringify
 * @alias droid.stringify
 * @param {Object} value
 * @return {String} JSON string
 */
/**
 * JSON decode
 * @id droid.json_parse
 * @alias droid.json_parse
 * @param {String} str
 * @return {Object}
 */







			
